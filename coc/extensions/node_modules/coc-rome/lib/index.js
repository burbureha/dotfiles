"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  activate: () => activate
});
module.exports = __toCommonJS(src_exports);
var import_child_process = require("child_process");
var import_coc = require("coc.nvim");
var import_fs = require("fs");
var import_net = require("net");
var import_path = require("path");
var PLATFORMS = {
  win32: {
    x64: {
      triplet: "x86_64-pc-windows-msvc",
      package: "@rometools/cli-win32-x64/rome.exe"
    },
    arm64: {
      triplet: "aarch64-pc-windows-msvc",
      package: "@rometools/cli-win32-arm64/rome.exe"
    }
  },
  darwin: {
    x64: {
      triplet: "x86_64-apple-darwin",
      package: "@rometools/cli-darwin-x64/rome"
    },
    arm64: {
      triplet: "aarch64-apple-darwin",
      package: "@rometools/cli-darwin-arm64/rome"
    }
  },
  linux: {
    x64: {
      triplet: "x86_64-unknown-linux-gnu",
      package: "@rometools/cli-linux-x64/rome"
    },
    arm64: {
      triplet: "aarch64-unknown-linux-gnu",
      package: "@rometools/cli-linux-arm64/rome"
    }
  }
};
function resolveRomeBin() {
  var _a, _b;
  const cfg = import_coc.workspace.getConfiguration("rome");
  let bin = cfg.get("bin", null);
  if (bin && (0, import_fs.existsSync)(bin)) {
    return bin;
  }
  bin = (0, import_path.join)(import_coc.workspace.root, "node_modules", "rome", "bin", "rome");
  if ((0, import_fs.existsSync)(bin)) {
    const packageName = (_b = (_a = PLATFORMS[process.platform]) == null ? void 0 : _a[process.arch]) == null ? void 0 : _b.package;
    return (0, import_path.join)(import_coc.workspace.root, "node_modules", packageName);
  }
  return "";
}
async function getSocketPath(command) {
  const tmpdir = await import_coc.workspace.nvim.eval("$TMPDIR");
  const child = (0, import_child_process.spawn)(command, ["__print_socket"], {
    stdio: "pipe",
    env: { ...process.env, TMPDIR: tmpdir }
  });
  return new Promise((resolve, reject) => {
    child.once("error", (err) => {
      console.error(err);
      reject("");
    });
    child.stdout.on("data", (data) => {
      resolve(data.toString("utf-8").trim());
    });
  });
}
async function createMessageTransports(command) {
  const socketPath = await getSocketPath(command);
  if (!socketPath) {
    throw new Error("Could not get socket path from `rome __print_socket`");
  }
  let socket;
  try {
    socket = (0, import_net.connect)(socketPath);
  } catch (err) {
    throw new Error(`Could not connect to the Rome server at: ${socketPath}`);
  }
  await new Promise((resolve, reject) => {
    socket.once("ready", resolve);
    socket.once("error", (err) => reject(err));
  });
  return { writer: socket, reader: socket };
}
async function activate(context) {
  const enable = import_coc.workspace.getConfiguration("rome").get("enable");
  if (!enable) {
    return;
  }
  const command = resolveRomeBin();
  if (!command) {
    return;
  }
  const serverOptions = createMessageTransports.bind(
    void 0,
    command
  );
  const clientOptions = {
    progressOnInitialization: true,
    documentSelector: [
      { scheme: "file", language: "javascript" },
      { scheme: "file", language: "javascriptreact" },
      { scheme: "file", language: "typescript" },
      { scheme: "file", language: "typescriptreact" }
    ]
  };
  const client = new import_coc.LanguageClient("rome", serverOptions, clientOptions);
  context.subscriptions.push(import_coc.services.registLanguageClient(client));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  activate
});
