import { Parser } from './Parser.js';
export { Parser } from './Parser.js';
import { DomHandler } from '../../../domhandler/lib/esm/index.js';
export { DomHandler as DefaultHandler, DomHandler } from '../../../domhandler/lib/esm/index.js';
export { default as Tokenizer } from './Tokenizer.js';
import * as index from '../../../domelementtype/lib/esm/index.js';
export { index as ElementType };
import * as index$1 from '../../../domutils/lib/esm/index.js';
export { index$1 as DomUtils };
import { getFeed } from '../../../domutils/lib/esm/feeds.js';
export { getFeed } from '../../../domutils/lib/esm/feeds.js';

/**
 * Parses the data, returns the resulting document.
 *
 * @param data The data that should be parsed.
 * @param options Optional options for the parser and DOM builder.
 */

function parseDocument(data, options) {
  const handler = new DomHandler(undefined, options);
  new Parser(handler, options).end(data);
  return handler.root;
}
/**
 * Parses data, returns an array of the root nodes.
 *
 * Note that the root nodes still have a `Document` node as their parent.
 * Use `parseDocument` to get the `Document` node instead.
 *
 * @param data The data that should be parsed.
 * @param options Optional options for the parser and DOM builder.
 * @deprecated Use `parseDocument` instead.
 */

function parseDOM(data, options) {
  return parseDocument(data, options).children;
}
/**
 * Creates a parser instance, with an attached DOM handler.
 *
 * @param cb A callback that will be called once parsing has been completed.
 * @param options Optional options for the parser and DOM builder.
 * @param elementCb An optional callback that will be called every time a tag has been completed inside of the DOM.
 */

function createDomStream(cb, options, elementCb) {
  const handler = new DomHandler(cb, options, elementCb);
  return new Parser(handler, options);
}
/**
 * Parse a feed.
 *
 * @param feed The feed that should be parsed, as a string.
 * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.
 */

function parseFeed(feed, options = {
  xmlMode: true
}) {
  return getFeed(parseDOM(feed, options));
}

export { createDomStream, parseDOM, parseDocument, parseFeed };
